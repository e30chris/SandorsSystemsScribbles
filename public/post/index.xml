<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sandors Systems Scribbles</title>
    <link>https://theargo.io/post/</link>
    <description>Recent content in Posts on Sandors Systems Scribbles</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Thu, 10 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://theargo.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git push to two remotes</title>
      <link>https://theargo.io/post/git_push_to_two_remotes/</link>
      <pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/git_push_to_two_remotes/</guid>
      <description>The Problem: Need a way to share code hosted in a private GitLab repo publicly on GitHub.
The solution: Use a second Git remote to share a private Git repo publicly on GitHub.
Backstory: GitLab with its free unlimited private repository hosting and CiCd services offers a great place to host Git repos and build code. GitHub is the defacto home of Open Source code repositories and is also a great way to add to a resume by sharing projects publicly.</description>
    </item>
    
    <item>
      <title>Configure new servers with the basics via Ansible</title>
      <link>https://theargo.io/post/configure_new_servers_with_the_basics_via_ansible/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/configure_new_servers_with_the_basics_via_ansible/</guid>
      <description>The Problem: You have a throw away server that you only need for the next couple of hours to try something out. You need the server configured so that you can login and get to work without messing with yum updates or adding your user and public ssh keys to access it.
The solution: This Ansible playbook that is simple and to the point. It updates yum or apt, applies a sane sshd config, adds users and groups and then gets your public ssh key onto the throwaway box so you can login without a password.</description>
    </item>
    
    <item>
      <title>MacBook Setup Using Ansible and Homebrew</title>
      <link>https://theargo.io/post/macbook_setup_using_ansible_and_homebrew/</link>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/macbook_setup_using_ansible_and_homebrew/</guid>
      <description>The Problem: You have a brand new fresh install of OSX on your MacBook and you need to get up and running. You want all your apps installed using Homebrew &amp;amp; Cask and OSX setup with goodies like zsh and .dotfiles.
The solution: Use Ansible to deploy CLI apps via Homebrew and GUI Apps via Cask. Then have Ansible setup the shell with zsh and .dotfiles that are pulled from a GitHub repo.</description>
    </item>
    
    <item>
      <title>Deploy AWS Redshift into a dedicated VPC on the EC2-VPC platform</title>
      <link>https://theargo.io/post/deploy_aws_redshift_into_a_dedicated_vpc_on_the_ec2_vpc_platform/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/deploy_aws_redshift_into_a_dedicated_vpc_on_the_ec2_vpc_platform/</guid>
      <description>The Problem: The Problem - By default new AWS accounts are based on the EC2-VPC platform. If you want to launch a Redshift cluster into a specific VPC that is not the default you must first create a Redshift Cluster Subnet.
The solution: Create a Redshift Cluster Subnet that will be joined to a existing VPC (not the default VPC) which will then allow the new Redshift cluster to be launched into that dedicated VPC.</description>
    </item>
    
    <item>
      <title>Deploy Wordpress to AWS Beanstalk using eb</title>
      <link>https://theargo.io/post/deploy_php_to_aws_beanstalk_using_eb/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/deploy_php_to_aws_beanstalk_using_eb/</guid>
      <description>The Problem Wordpress has lots of hosting options all of which cost money to be on a shared hosting server. I need a autoscaling &amp;amp; auto-healing Wordpress setup that will cost less than dedicated WP hosting while offering all the awesomeness of AWS. AWS is hard to setup all the moving pieces correctly, Beanstalk configures all those pieces while costing nothing other than paying for the AWS resources Beanstalk sets up.</description>
    </item>
    
    <item>
      <title>Ansible on HP-UX 11.31</title>
      <link>https://theargo.io/post/ansible_on_hp_ux_11_dot_31/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/ansible_on_hp_ux_11_dot_31/</guid>
      <description> The problem Old corporations that are running ancient OS&amp;rsquo;es desperately need configuration management and automation to keep the dinosaurs efficient.
The goal Install Python on HP-UX so Ansible can manage and automate the ancient servers.
HowTo sandor@pineapplez:$ ansible -i hosts all -m raw -a &amp;quot;swinstall -x mount_all_filesystems=false -s depotserver:/depot/11.31/python python&amp;quot;  </description>
    </item>
    
    <item>
      <title>Run Ansible through pmksh</title>
      <link>https://theargo.io/post/run_ansible_through_pmksh/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/run_ansible_through_pmksh/</guid>
      <description>The problem Old corporations use shitty old software to do things that modern Linux is really good at doing itself. Using pmksh instead of a well laid out sudoers setup is what the problem is.
The goal Configure Ansible playbooks to execute through the pmksh shell on the targeted servers.
Shells &amp;amp; Ansible Currently Ansible &amp;amp; Python work together to take the output from bash and report back with formatting.</description>
    </item>
    
    <item>
      <title>Using Ansible to Align Passwords on Servers</title>
      <link>https://theargo.io/post/using_ansible_to_align_passwords_on_servers/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/using_ansible_to_align_passwords_on_servers/</guid>
      <description>The Problem: A group of servers get their passwords updated every 3 months with a new shared password. The servers passwords are then inconsistently updated leaving a group of servers with one of several possible user passwords.
The Goal: Use Ansible to attempt to login to each server using each of the possible passwords to find the correct one and log it. The final step of the playbook will have Ansible logging into each server using the found to be correct password and updating each server to a new shared password.</description>
    </item>
    
    <item>
      <title>Installing Ansible</title>
      <link>https://theargo.io/post/installing_ansible/</link>
      <pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/installing_ansible/</guid>
      <description>The Problem Need to deploy an Ansible Controller to run Playbooks from that uses the latest build and is easy to upgrade/configure.
The Solution Install Ansible from the latest release on GitHub.
The Goal Create an Ansible Controller directory that will run the latest version via git clone and setup the shell with the Ansible environment scripts.
Clone the Ansible repo Go to the GitHub project page github/ansible
Choose a release version or the dev branch and clone.</description>
    </item>
    
    <item>
      <title>Using Ansible to deploy a PuppetMaster</title>
      <link>https://theargo.io/post/using_ansible_to_deploy_a_puppetmaster/</link>
      <pubDate>Fri, 13 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/using_ansible_to_deploy_a_puppetmaster/</guid>
      <description>The Problem Need to deploy a new Puppet Enterprise cluster with a PuppetMaster, PuppetConsole and a PuppetDB while avoiding typos and misconfigurations. Also need to deploy to several environments using a consistent configuration.
The Solution Use Ansible to deploy Puppet onto freshly built servers that contain just a SysAdmins SSH public key.
The Goal A repeatable and documented way to deploy the very finicky Puppet installer in any environment needed from local vagrants to the clouds of vSphere, AWS, RackSpace or Digital Ocean.</description>
    </item>
    
    <item>
      <title>Using GoAccess to parse webserver logs</title>
      <link>https://theargo.io/post/using_goaccess_to_parse_webserver_logs/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/using_goaccess_to_parse_webserver_logs/</guid>
      <description>The Problem Need the ability to track web traffic for a specific hours worth of logs.
The Solution Using GoAccess to parse Apache logs that are rotated into hour chunks.
The Goal Install GoAccess to parse webserver logs. Use Ansible Playbooks for the installation, configuration and for re-usabilty of GoAccess on other servers. Keep it simple by rotating logs on the hour.
The Links  GoAccess - real-time web log analyzer - allinurl/goaccess Ansible - Ansible Docs Apache rotatelogs - Hourly Rotated WebServer Logs Digital Ocean - My referral link, thanks!</description>
    </item>
    
    <item>
      <title>Dogecoin mining on Digital Ocean</title>
      <link>https://theargo.io/post/dogecoin_mining_on_digital_ocean/</link>
      <pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/dogecoin_mining_on_digital_ocean/</guid>
      <description>The Goal Create a droplet on Digital Ocean to mine Dogecoins so fun much profits.
The Links  Dogecoin - very link /r/dogecoin - so reddit /r/dogemining - many mines Dogecoin Mining Pools - much swim Dogecoin Resources - sources Dogecoin Foundation - now found Digital Ocean - awesome drops TugBoat - command line ocean  Create a droplet sandor@argo&amp;gt; tugboat create lucydoge -s 62 -i 308287 -r 3 -k 44888  Name: lucydoge Status: active Region ID: 3 Image ID: 308287 Size ID: 62 Backups Active: false  Create user root@lucydoge:~# history root@lucydoge:~# ls -al root@lucydoge:~# useradd -m lucy root@lucydoge:~# passwd lucy root@lucydoge:~# adduser lucy sudo  Update Debian root@lucydoge:~# apt-get -y update &amp;amp;&amp;amp; apt-get -y upgrade  Install Screen root@lucydoge:~# apt-get install screen  Install a CPU Miner root@lucydoge:~# sudo apt-get install git build-essential autotools-dev libcurl4-gnutls-dev autoconf automake  lucy@lucydoge:~# mkdir ~/miner2049er  lucy@lucydoge:~# cd miner2049er lucy@lucydoge:~# git clone https://github.</description>
    </item>
    
    <item>
      <title>Using Oscar to Build a Local Puppet Environment with Vagrant</title>
      <link>https://theargo.io/post/using_oscar_to_build_a_local_puppet_environment_with_vagrant/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/using_oscar_to_build_a_local_puppet_environment_with_vagrant/</guid>
      <description>The Goal  Install Oscar Use Oscar to build a local PuppetMaster &amp;amp; Agent config Use Vagrant to start the PuppetMaster &amp;amp; Agent  Install  VirtualBox - https://www.virtualbox.org/wiki/Downloads Vagrant - Oscar works with Vagrant version 1.3.4 - http://downloads.vagrantup.com/tags/v1.3.4 Oscar - https://github.com/adrienthebo/oscar  sandor@pineApplez&amp;gt; vagrant plugin install oscar  Add a Vagrant Box sandor@pineApplez&amp;gt; vagrant box add centosPupLabs http://puppet-vagrant-boxes.puppetlabs.com/centos-64-x64-vbox4210-nocm.box  What that does:
sandor@pineApplez&amp;gt; vagrant box add boxName http://url.box   Downloads the .</description>
    </item>
    
    <item>
      <title>Using Vagrant on Windows</title>
      <link>https://theargo.io/post/using_vagrant_on_windows/</link>
      <pubDate>Tue, 17 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/using_vagrant_on_windows/</guid>
      <description>The Goal  Install and configure VirtualBox &amp;amp; Vagrant on your Windows dev box Download and start a Linux &amp;amp; Windows Vagrant Box.  Install  VirtualBox - https://www.virtualbox.org/wiki/Downloads Vagrant - http://www.vagrantup.com/downloads  Download the .msi Right click and Install as Administrator   Add a Vagrant Box  Open a Command Prompt and Run as Administrator  C:\Windows\system32\&amp;gt;vagrant box add centosPupLabs http://puppet-vagrant-boxes.puppetlabs.com/centos-64-x64-vbox4210-nocm.box  What that does:
C:\Windows\system32\&amp;gt;vagrant box add boxName http://url.</description>
    </item>
    
    <item>
      <title>VPN Setup - MacBook to OpenVPN Server using Tunnelblick</title>
      <link>https://theargo.io/post/vpn_setup_macbook_to_openvpn_server_using_tunnelblick/</link>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/vpn_setup_macbook_to_openvpn_server_using_tunnelblick/</guid>
      <description>The Goal  Get MacBook to connect to a OpenVPN Server Install Tunnelblick to make that happen  Setup the OpenVPN Server  Follow this - sandorsscribbl.es/vpn-setup-openvpn-server-deploy-on-aws  Install Tunnelblick Tunnelblick Google Code
Download OpenVPN Client Config file  Goto OpenVPN web client Login with new user Choose to download cert  Modify Client Config File for Tunnelblick  Create a folder for the new config / VPN connection The $vpnname.</description>
    </item>
    
    <item>
      <title>VPN Setup - OpenVPN Server Deploy on AWS</title>
      <link>https://theargo.io/post/vpn_setup_openvpn_server_deploy_on_aws/</link>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/vpn_setup_openvpn_server_deploy_on_aws/</guid>
      <description>The Goal  Deploy an OpenVPN Server on AWS  Launch the OpenVPN Access Server AMI  Set AMI to VPC network Auto Assign Public Static IP  AMI ids    AMI Location ami id     US East (Virginia) ami-ff6b3096   US West (Oregon) ami-c8039bf8   US West (N California) ami-6c0b3d29   EU West (Ireland) ami-89d83afe   Asia Pacific (Singapore) ami-3c9bce6e   Asia Pacific (Tokyo) ami-172d4916   Asia Pacific (Sydney) ami-db73efe1   South America (Sao Paulo) ami-6d4ee870    Set user-data    Key Value     public_hostname hostname that clients should use to contact the server   admin_user (default=openvpn) Access Server administrative account name   license Access Server license key without a license key only 2 connections allowed   reroute_gw default=0 if 1, clients will route internet traffic through the VPN   reroute_dns default=0 if 1, clients will route DNS queries through the VPN    Set New Security Group    Protocol Type Port Source Role     SSH TCP 22 Anywhere 0.</description>
    </item>
    
    <item>
      <title>Add WebProxy Cert to Fedora</title>
      <link>https://theargo.io/post/add_webproxy_cert_to_fedora/</link>
      <pubDate>Fri, 29 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/add_webproxy_cert_to_fedora/</guid>
      <description>The Goal  Make Fedora work behind a restrictive idiotic corporate web proxy Install a corporate cert to make that happen  Get the cert Install the cert spudBud@pineApplez&amp;gt; openssl x509 -text -in /path/to/proxycert.crt &amp;gt;&amp;gt; /etc/pki/tls/certs/ca-bundle.crt  The result Your corporate overlord has now man in the middled your personal gmail, have fun.</description>
    </item>
    
    <item>
      <title>Add Twitter Bootstrap 3 to OctoPress with OctoStrap3</title>
      <link>https://theargo.io/post/add_twitter_bootstrap_3_to_octopress_with_octostrap3/</link>
      <pubDate>Tue, 26 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/add_twitter_bootstrap_3_to_octopress_with_octostrap3/</guid>
      <description>The Goal  Use awesome Twitter Bootstrap 3 on Octopress Setup OctoStrap3 to do that  The Links OctoPress - link
OctoStrap3 - link
Octopress Setup Go here and do all of that
OctoStrap3 Setup Instructions here
From the base OctoPress dir
spudBud@pineApplez&amp;gt; git clone https://github.com/kAworu/octostrap3 .themes/octostrap3 spudBud@pineApplez&amp;gt; rake &amp;quot;install[octostrap3]&amp;quot;  Category List Aside Add a category list html page to source/_includes/custom/asides
{% gist 7669102 %}
Add the new aside in the _config.</description>
    </item>
    
    <item>
      <title>Add Twitter Timeline to OctoPress Sidebar</title>
      <link>https://theargo.io/post/add_twitter_timeline_to_octopress_sidebar/</link>
      <pubDate>Tue, 26 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/add_twitter_timeline_to_octopress_sidebar/</guid>
      <description>The Goal  Add a Twitter timeline to the sidebar of an Octopress blog  The links Octopress - link
Acqui-hire.me - link
Create a Twitter widget Goto the Twitter widget settings page here and create your timeline.
Twitter Aside Add a twitter html page to source/_include/custom/asides
{% gist 7669257 %}
Add that aside in your _config.yml
# list each of the sidebar modules you want to include, in the order you want them to appear.</description>
    </item>
    
    <item>
      <title>Auto Update VirtualBox Guest Additions with vagrant-vbguest</title>
      <link>https://theargo.io/post/auto_update_virtualbox_guest_additions_with_vagrant_vbguest/</link>
      <pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/auto_update_virtualbox_guest_additions_with_vagrant_vbguest/</guid>
      <description>The Goal  Keep the VirtualBox guest additions at the latest version using vagrant-vbguest built by dotless-de.  The Links  Vagrant - link
 Vagrant vbguest - link
 dotless-de - link
  vagrant-vbguest A beautifully simple Vagrant plugin to manage the guest additions on VirtualBox.
install spudBud@pineApplez&amp;gt; ~/Codestuff/vagrants/PuppetMaster $vagrant plugin install vagrant-vbguest  bootup usage vagrant-vbguest will run on every vagrant up or on a vagrant reload unless you specifically tell it not to.</description>
    </item>
    
    <item>
      <title>Post to octopress and deploy to Github pages</title>
      <link>https://theargo.io/post/post_to_octopress_and_deploy_to_github_pages/</link>
      <pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/post_to_octopress_and_deploy_to_github_pages/</guid>
      <description>The Goal Use Jekyll &amp;amp; octopress to post to Sandors Systems Scribbles which is hosted on GitHub Pages (where you are now)
not anymore, Sandors HowTo notebook has been moved to Amazon AWS
The Links  Jekyll - link
 OctoPress - link
 GitHub Pages - link
  Create a new post pineApplez&amp;gt;e30chris.github.io $rake new_post Enter a title for your post: post to octopress and deploy to github pages mkdir -p source/_posts Creating new post: source/_posts/2013-11-12-post-to-octopress-and-deploy-to-github-pages.</description>
    </item>
    
    <item>
      <title>Puppet vim setup</title>
      <link>https://theargo.io/post/puppet_vim_setup/</link>
      <pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/puppet_vim_setup/</guid>
      <description>The Goal Setup vim to edit Puppet Manifests using a few good tools that will get you to pass Puppet Lint tests.
The Links  PuppetLabs - link
 vim-puppet - link
 vim tabular - link
 vim syntastic - link
  Vim-Pathogen Vim-Pathogen on github
[root@Argon ~]# mkdir -p ~/.vim/autoload ~/.vim/bundle [root@Argon ~]# cd ~/.vim/autoload [root@Argon ~]# curl -o pathogen.vim https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim  Add these settings to .</description>
    </item>
    
    <item>
      <title>Vanilla Vagrant Setup</title>
      <link>https://theargo.io/post/vanilla_vagrant_setup/</link>
      <pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/vanilla_vagrant_setup/</guid>
      <description>The Goal  Setup Vagrant Start a Vanilla Ubuntu box  The Links  Vagrant - link  Vagrant Setup Grab the latest here Install it Thats it Adding Boxes When you add a box to your local puter it downloads the VM image to your home dir like so:
vagrant box add name url  spudBud@pineApplez&amp;gt; vagrant box add precise32 http://files.vagrantup.com/precise32.box  This downloads the VM image into the /boxes dir:</description>
    </item>
    
    <item>
      <title>Ansible on RedHat 5.x</title>
      <link>https://theargo.io/post/ansible_on_redhat_5_dot_x/</link>
      <pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/ansible_on_redhat_5_dot_x/</guid>
      <description> The problem Older Pythons that live on older RedHats do not have json support. Old corporations still use old OS&amp;rsquo;es like RedHat 5.x but need to use modern configuration management tools like Ansible.
The goal Enable RedHat 5.x systems to run Ansible by installing json support on Python 2.4.
HowTo Using Ansible Raw
sandor@pineapplez:$ ansible -i hosts all -m raw -a &amp;quot;yum -y install python-simplejson&amp;quot;  </description>
    </item>
    
  </channel>
</rss>
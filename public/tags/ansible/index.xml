<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ansible on Sandors Systems Scribbles</title>
    <link>https://theargo.io/tags/ansible/</link>
    <description>Recent content in Ansible on Sandors Systems Scribbles</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 08 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://theargo.io/tags/ansible/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configure new servers with the basics via Ansible</title>
      <link>https://theargo.io/post/configure_new_servers_with_the_basics_via_ansible/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/configure_new_servers_with_the_basics_via_ansible/</guid>
      <description>The Problem: You have a throw away server that you only need for the next couple of hours to try something out. You need the server configured so that you can login and get to work without messing with yum updates or adding your user and public ssh keys to access it.
The solution: This Ansible playbook that is simple and to the point. It updates yum or apt, applies a sane sshd config, adds users and groups and then gets your public ssh key onto the throwaway box so you can login without a password.</description>
    </item>
    
    <item>
      <title>MacBook Setup Using Ansible and Homebrew</title>
      <link>https://theargo.io/post/macbook_setup_using_ansible_and_homebrew/</link>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/macbook_setup_using_ansible_and_homebrew/</guid>
      <description>The Problem: You have a brand new fresh install of OSX on your MacBook and you need to get up and running. You want all your apps installed using Homebrew &amp;amp; Cask and OSX setup with goodies like zsh and .dotfiles.
The solution: Use Ansible to deploy CLI apps via Homebrew and GUI Apps via Cask. Then have Ansible setup the shell with zsh and .dotfiles that are pulled from a GitHub repo.</description>
    </item>
    
    <item>
      <title>Ansible on HP-UX 11.31</title>
      <link>https://theargo.io/post/ansible_on_hp_ux_11_dot_31/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/ansible_on_hp_ux_11_dot_31/</guid>
      <description> The problem Old corporations that are running ancient OS&amp;rsquo;es desperately need configuration management and automation to keep the dinosaurs efficient.
The goal Install Python on HP-UX so Ansible can manage and automate the ancient servers.
HowTo sandor@pineapplez:$ ansible -i hosts all -m raw -a &amp;quot;swinstall -x mount_all_filesystems=false -s depotserver:/depot/11.31/python python&amp;quot;  </description>
    </item>
    
    <item>
      <title>Run Ansible through pmksh</title>
      <link>https://theargo.io/post/run_ansible_through_pmksh/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/run_ansible_through_pmksh/</guid>
      <description>The problem Old corporations use shitty old software to do things that modern Linux is really good at doing itself. Using pmksh instead of a well laid out sudoers setup is what the problem is.
The goal Configure Ansible playbooks to execute through the pmksh shell on the targeted servers.
Shells &amp;amp; Ansible Currently Ansible &amp;amp; Python work together to take the output from bash and report back with formatting.</description>
    </item>
    
    <item>
      <title>Using Ansible to Align Passwords on Servers</title>
      <link>https://theargo.io/post/using_ansible_to_align_passwords_on_servers/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/using_ansible_to_align_passwords_on_servers/</guid>
      <description>The Problem: A group of servers get their passwords updated every 3 months with a new shared password. The servers passwords are then inconsistently updated leaving a group of servers with one of several possible user passwords.
The Goal: Use Ansible to attempt to login to each server using each of the possible passwords to find the correct one and log it. The final step of the playbook will have Ansible logging into each server using the found to be correct password and updating each server to a new shared password.</description>
    </item>
    
    <item>
      <title>Installing Ansible</title>
      <link>https://theargo.io/post/installing_ansible/</link>
      <pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/installing_ansible/</guid>
      <description>The Problem Need to deploy an Ansible Controller to run Playbooks from that uses the latest build and is easy to upgrade/configure.
The Solution Install Ansible from the latest release on GitHub.
The Goal Create an Ansible Controller directory that will run the latest version via git clone and setup the shell with the Ansible environment scripts.
Clone the Ansible repo Go to the GitHub project page github/ansible
Choose a release version or the dev branch and clone.</description>
    </item>
    
    <item>
      <title>Using Ansible to deploy a PuppetMaster</title>
      <link>https://theargo.io/post/using_ansible_to_deploy_a_puppetmaster/</link>
      <pubDate>Fri, 13 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/using_ansible_to_deploy_a_puppetmaster/</guid>
      <description>The Problem Need to deploy a new Puppet Enterprise cluster with a PuppetMaster, PuppetConsole and a PuppetDB while avoiding typos and misconfigurations. Also need to deploy to several environments using a consistent configuration.
The Solution Use Ansible to deploy Puppet onto freshly built servers that contain just a SysAdmins SSH public key.
The Goal A repeatable and documented way to deploy the very finicky Puppet installer in any environment needed from local vagrants to the clouds of vSphere, AWS, RackSpace or Digital Ocean.</description>
    </item>
    
    <item>
      <title>Using GoAccess to parse webserver logs</title>
      <link>https://theargo.io/post/using_goaccess_to_parse_webserver_logs/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/using_goaccess_to_parse_webserver_logs/</guid>
      <description>The Problem Need the ability to track web traffic for a specific hours worth of logs.
The Solution Using GoAccess to parse Apache logs that are rotated into hour chunks.
The Goal Install GoAccess to parse webserver logs. Use Ansible Playbooks for the installation, configuration and for re-usabilty of GoAccess on other servers. Keep it simple by rotating logs on the hour.
The Links  GoAccess - real-time web log analyzer - allinurl/goaccess Ansible - Ansible Docs Apache rotatelogs - Hourly Rotated WebServer Logs Digital Ocean - My referral link, thanks!</description>
    </item>
    
    <item>
      <title>Ansible on RedHat 5.x</title>
      <link>https://theargo.io/post/ansible_on_redhat_5_dot_x/</link>
      <pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/ansible_on_redhat_5_dot_x/</guid>
      <description> The problem Older Pythons that live on older RedHats do not have json support. Old corporations still use old OS&amp;rsquo;es like RedHat 5.x but need to use modern configuration management tools like Ansible.
The goal Enable RedHat 5.x systems to run Ansible by installing json support on Python 2.4.
HowTo Using Ansible Raw
sandor@pineapplez:$ ansible -i hosts all -m raw -a &amp;quot;yum -y install python-simplejson&amp;quot;  </description>
    </item>
    
  </channel>
</rss>
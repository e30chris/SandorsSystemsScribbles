<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Sandors Systems Scribbles</title>
    <link>https://theargo.io/tags/aws/</link>
    <description>Recent content in Aws on Sandors Systems Scribbles</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Fri, 01 May 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://theargo.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy AWS Redshift into a dedicated VPC on the EC2-VPC platform</title>
      <link>https://theargo.io/post/deploy_aws_redshift_into_a_dedicated_vpc_on_the_ec2_vpc_platform/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/deploy_aws_redshift_into_a_dedicated_vpc_on_the_ec2_vpc_platform/</guid>
      <description>The Problem: The Problem - By default new AWS accounts are based on the EC2-VPC platform. If you want to launch a Redshift cluster into a specific VPC that is not the default you must first create a Redshift Cluster Subnet.
The solution: Create a Redshift Cluster Subnet that will be joined to a existing VPC (not the default VPC) which will then allow the new Redshift cluster to be launched into that dedicated VPC.</description>
    </item>
    
    <item>
      <title>Deploy Wordpress to AWS Beanstalk using eb</title>
      <link>https://theargo.io/post/deploy_php_to_aws_beanstalk_using_eb/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/deploy_php_to_aws_beanstalk_using_eb/</guid>
      <description>The Problem Wordpress has lots of hosting options all of which cost money to be on a shared hosting server. I need a autoscaling &amp;amp; auto-healing Wordpress setup that will cost less than dedicated WP hosting while offering all the awesomeness of AWS. AWS is hard to setup all the moving pieces correctly, Beanstalk configures all those pieces while costing nothing other than paying for the AWS resources Beanstalk sets up.</description>
    </item>
    
    <item>
      <title>VPN Setup - OpenVPN Server Deploy on AWS</title>
      <link>https://theargo.io/post/vpn_setup_openvpn_server_deploy_on_aws/</link>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://theargo.io/post/vpn_setup_openvpn_server_deploy_on_aws/</guid>
      <description>The Goal  Deploy an OpenVPN Server on AWS  Launch the OpenVPN Access Server AMI  Set AMI to VPC network Auto Assign Public Static IP  AMI ids    AMI Location ami id     US East (Virginia) ami-ff6b3096   US West (Oregon) ami-c8039bf8   US West (N California) ami-6c0b3d29   EU West (Ireland) ami-89d83afe   Asia Pacific (Singapore) ami-3c9bce6e   Asia Pacific (Tokyo) ami-172d4916   Asia Pacific (Sydney) ami-db73efe1   South America (Sao Paulo) ami-6d4ee870    Set user-data    Key Value     public_hostname hostname that clients should use to contact the server   admin_user (default=openvpn) Access Server administrative account name   license Access Server license key without a license key only 2 connections allowed   reroute_gw default=0 if 1, clients will route internet traffic through the VPN   reroute_dns default=0 if 1, clients will route DNS queries through the VPN    Set New Security Group    Protocol Type Port Source Role     SSH TCP 22 Anywhere 0.</description>
    </item>
    
  </channel>
</rss>